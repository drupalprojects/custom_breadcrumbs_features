<?php

/**
 * Test that Custom Breadcrumbs can be exported and rebuilt using Features.
 */
class CustomBreadcrumbsFeaturesTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => t('Custom Breadcrumbs Features'),
      'description' => t('Run tests for featurized Custom Breadcrumbs.') ,
      'group' => t('Custom Breadcrumbs'),
    );
  }

  private $user;

  public function setUp() {
    parent::setUp(
      'custom_breadcrumbs',
      'custom_breadcrumbsapi',
      'custom_breadcrumbs_panels',
      'custom_breadcrumbs_paths',
      'custom_breadcrumbs_taxonomy',
      'custom_breadcrumbs_views',
      'features',
      'custom_breadcrumbs_features',
      'custom_breadcrumbs_features_test'
    );

    // Run a features rebuild to ensure our feature is fully installed.
    features_rebuild();

    $this->user = $this->drupalCreateUser(array('administer features'));
    $this->drupalLogin($this->user);
  }

  /**
   * Run test.
   */
  public function test() {
    module_load_include('inc', 'features', 'features.export');

    $components = array(
      'custom_breadcrumb',
      'custom_breadcrumbsapi',
      'custom_breadcrumbs_panels',
      'custom_breadcrumbs_paths',
      'custom_breadcrumbs_taxonomy_term',
      'custom_breadcrumbs_taxonomy_vocabulary',
      'custom_breadcrumbs_views',
    );

    foreach ($components as $component) {
      $callback = "_test_$component";

      // Ensure that the component/default is properly available.
      $object = $this->$callback('load');
      $this->assertTrue(!empty($object), t('@component present.', array('@component' => $component)));

      // Ensure that the component is defaulted.
      $states = features_get_component_states(array('custom_breadcrumbs_features_test'), FALSE, TRUE);
      $this->assertTrue($states['custom_breadcrumbs_features_test'][$component] === FEATURES_DEFAULT, t('@component state: Default.', array('@component' => $component)));

      // Override component and test that Features detects the override.
      $this->$callback('override', $this);
      $states = features_get_component_states(array('custom_breadcrumbs_features_test'), FALSE, TRUE);
      $this->assertTrue($states['custom_breadcrumbs_features_test'][$component] === FEATURES_OVERRIDDEN, t('@component state: Overridden.', array('@component' => $component)));
    }

    // Revert component and ensure that component has reverted.
    // Do this in separate loops so we only have to run
    // drupal_flush_all_caches() once.
    foreach ($components as $component) {
      features_revert(array('custom_breadcrumbs_features_test' => array($component)));
    }
    drupal_flush_all_caches();
    foreach ($components as $component) {
      // Reload so things modules can clear their cache if needed.
      $this->$callback('load');
      $states = features_get_component_states(array('custom_breadcrumbs_features_test'), FALSE, TRUE);
      $this->assertTrue($states['custom_breadcrumbs_features_test'][$component] === FEATURES_DEFAULT, t('@component reverted.', array('@component' => $component)));
    }
  }

  protected function _test_custom_breadcrumb($op = 'load') {
    switch ($op) {
      case 'load':
        // TODO
        return field_info_instance('node', 'field_features_test', 'features_test');
      case 'override':
        // TODO
        $field_instance = field_info_instance('node', 'field_features_test', 'features_test');
        $field_instance['label'] = 'Foo bar';
        field_update_instance($field_instance);
        break;
    }
  }
}

